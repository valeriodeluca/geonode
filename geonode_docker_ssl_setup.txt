====================
DOCKER SETUP
====================
cd
sudo apt-get update
sudo apt install -y screen
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install -y docker-ce
sudo usermod -aG docker $USER
source $HOME/.bashrc
sudo docker run hello-world
sudo curl -L https://github.com/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version
sudo apt-get install git
sudo apt-get update
git clone https://github.com/GeoNode/geonode.git
ls
cd geonode
la
nano docker-compose.override.localhost.yml
# Replace localhost with your server IP
# Set ALLOWED_HOSTS=['*']
----------docker-compose.override.localhost.yml----------
version: '2.2'
services:

  django:
    build: .
    # Loading the app is defined here to allow for
    # autoreload on changes it is mounted on top of the
    # old copy that docker added when creating the image
    volumes:
      - '.:/usr/src/app'
    environment:
      - DEBUG=False
      - GEONODE_LB_HOST_IP=Server_IP
      - GEONODE_LB_PORT=80
      - SITEURL=http://Server_IP/
      - ALLOWED_HOSTS=['*']
      - GEOSERVER_PUBLIC_LOCATION=http://Server_IP/geoserver/
      - GEOSERVER_WEB_UI_LOCATION=http://Server_IP/geoserver/

  geoserver:
    environment:
      - GEONODE_LB_HOST_IP=Server_IP
      - GEONODE_LB_PORT=80
---------------------------------------------------------
Ctrl+x / y / Enter
sudo docker-compose -f docker-compose.yml -f docker-compose.override.localhost.yml up --build -d
# Browser Server_IP to check GeoNode home page.
# Browser Server_Domain (Server_Subdomain) if you targeted a domain (or subdomain) to a Server_IP in your DNS Administration panel on your server provider.
# At this point HTTP works.
====================
SSL SETUP (HTTPS)
====================
cd geonode
la
nano docker-compose.yml
# In geonode service lines add the nginx.conf volumes:
----------docker-compose.yml----------
...
  geonode:
    image: geonode/nginx:${SET_DOCKER_ENV}
    restart: unless-stopped
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    depends_on:
      - django
      - celery
      - geoserver
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx-confd:/etc/nginx
      - nginx-certificates:/geonode-certificates
      - statics:/mnt/volumes/statics
      - ./nginx.conf:/etc/nginx/nginx.conf
...
--------------------------------------
Ctrl+x / y / Enter
wget https://gist.githubusercontent.com/terrywang/9612069/raw/89c513f1c94197e236913eb0470922251f07bb15/nginx.conf
docker ps
# Copy first ID Container e.g.: e0f4848e7d03
docker exec -it e0f4848e7d03 /bin/bash
ls /etc/nginx/
cat /etc/nginx/nginx.conf
# Copy all nginx.conf lines
----------nginx.conf----------
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
  worker_connections  1024;
}


http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;
  error_log /var/log/nginx/error.log;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  65;

  #gzip  on;


  server{
    listen 80;
    index index.html index.htm;
    root   /mnt/volumes/statics/x;

    location /{
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
        add_header Access-Control-Allow-Credentials true;
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        add_header Access-Control-Max-Age 1728000;
        return 200;
      }
      try_files $uri @django;
    }
    
    location @django {

      etag off;
      expires 0;
      include uwsgi_params;
      uwsgi_pass uwsgi://django:8000;

      add_header Access-Control-Allow-Credentials false;
      add_header Access-Control-Allow-Headers "Content-Type, Accept, Authorization, Origin, User-Agent";
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, OPTIONS";
    }


    location /geoserver {
      etag off;
      expires 0;
      proxy_pass http://geoserver:8080/geoserver;

      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
    }
    etag on;
    gzip on;

    client_max_body_size 100M;
    client_body_buffer_size 128K;

    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    proxy_read_timeout          600;
    send_timeout                600;
    uwsgi_read_timeout          600;

    expires 1d;
    gzip_disable "msie6";
    gzip_comp_level 6;
    gzip_min_length 1100;
    gzip_buffers 16 8k;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        image/svg+xml;

 }
    #include /etc/nginx/conf.d/*.conf;
}
------------------------------
exit
rm nginx.conf
nano nginx.conf
# Paste all nginx.conf lines copied before.
# Add "x" at the end of this line: root /mnt/volumes/statics/x;
Ctrl+x / y / Enter
docker-compose stop
docker-compose rm / y
docker-compose -f docker-compose.yml -f docker-compose.override.localhost.yml up --build -d
docker ps
# Take first ID container
docker exec -it e0f4848e7d03 /bin/bash
# Check configuration with "x", it is the right one.
cat /etc/nginx/nginx.conf
exit
nano nginx.conf
# Remove "x", write: root   /mnt/volumes/statics/;
Ctrl+x / y / Enter
sudo apt install snapd
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot
certbot --version
certbot certonly --standalone
my_email@email.email
A
Y
my_domain




































